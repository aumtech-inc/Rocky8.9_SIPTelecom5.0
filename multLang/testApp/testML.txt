testML.txt                                                8-27-2008  (djb)
----------                                                ---------

This document explains the testML application, which has been used to test
the arcML APIs (TEL_MLSpeakCurrency, TEL_MLSpeakNumber, TEL_MLSpeakTime, and
TEL_MLSpeakDate). 

The application (testML.c) is a 'C' application to be generated by the 
'makegen' utility.

All of the necessary items of this application is contained in a the tar file
"testMLApp.tar.08272008" (detailed below in the contents section below).

Note: feel free to modify the app and data files to suite your testing needs.
===============================================================================
CONTENTS
Contents of the testMLApp.tar.08272008 file:

./Exec/generate_testMLData.sh
        # This script generates four files:
        # testMLCurrency.dat, testMLDate.dat, testMLNumbers.dat, and 
        # testMLTime.dat.  Each line contains data to be read/processed
        # by the application.  

./Applications/testML.c
    This is the app.  It performs the following:
        * prompts the user for the language to test (french or spanish)
        * prompts the user for what to test (currency, number, time, or
          dates)
        * based on the responses, it will read each line in the appropriate
          input file ( testMLCurrency.dat, testMLNumbers.dat,
          testMLNumbers.dat, and testMLTime.dat ), and speak the contents 
          out in english first and the in the specified language until 
          a disconnect occurs or all lines in the file are processed.
		* it logs the the file `Te`/log.testML.<current date>

./Applications/testML.txt           # This document

./Exec/testML_32a.tag               # Tag file for testing on sdm systems
./Exec/testML_64p.tag               # Tag file for testing on SIP systems
./Exec/testML.tag                   # Actual tag file to be read from the
                                    # application. ( Copy the appropriate
                                    # tag file above over this one. )

./Exec/testMLPhrases/*.32a and *.64p  # This directory contains the 
                                      # application phrases for both SIP and
                                      # sdm systems.

===============================================================================
INSTALL
Perform the following to install the testML app:

* cp the testMLApp.tar.08272008 file to the /tmp directory

* change directory to to the $TELECOM directory and extract the contents
  $ cd /home/arc/.ISP/Telecom        # make sure it is extracted from this 
                                     # diretory
  $ tar -xvf /tmp/testMLApp.tar.08272008   # This extracts the app, phrases, tag
                                  # files, and a shell script to generate
                                  # the input data files.

* generate the binary
  $ Ta (cd /home/arc/.ISP/Telecom/Applications)
  $ makegen testML  # Be sure to answer 'y' to that 'add more libraries"
                    # question and add the library 'arcML'. (example below)

        Would you like to add some more libraries [y/n/?] {default = n}: y
        Press <Enter> to STOP
            Enter library name : arcML
            Enter library name :
        Start generating the make file mk_testML...
        Start compiling with mk_testML ...
        gcc -s -c testML.c -I /home/arc/.ISP/Telecom/Applications/include -I
        /home/arc/.ISP/Global/include
        gcc -s -o testML testML.o -L /home/arc/.ISP/Telecom/Applications/lib -L
        /home/arc/.ISP/Network/Applications/lib -L /home/arc/.ISP/Global/lib  
        -larcML -lISPTel -lISPUtil -lISPCDR -lrespcom  -lUTILS -lISPLog
        -lTELLog -lloglite -lgaUtils
        Application testML compiled successfully

* generate the input scripts
  $ Te (cd /home/arc/.ISP/Telecom/Exec)
  $ ./generate_testMLData.sh  # Data file generation script.

* Set the appropriate application tag file for the platform. For SIP
  Telecom, set the phrases for 64p:
    $ Te (cd /home/arc/.ISP/Telecom/Exec)
    $ cp testML_64p.tag testML.tag
  otherwise, set it for 32a:
    $ cp testML_32a.tag testML.tag

