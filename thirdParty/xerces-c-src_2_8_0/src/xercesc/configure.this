#!/bin/bash 
#

#Having build problems?
#Read instructions at http://xerces.apache.org/xerces-c/build.html
#Still cannot resolve it?
#Find out if someone else had the same problem before.
#Go to http://marc.theaimsgroup.com/?l=xerces-c-dev
#
#In future, you may also directly type the following commands to create
#the Makefiles.

export TRANSCODER="NATIVE"
export MESSAGELOADER="INMEM"
export NETACCESSOR="Socket"
export THREADS="pthread"
export LIBTYPE="shared"
export BITSTOBUILD="64"
export CC="gcc"
export CXX="g++"
export CXXFLAGS=" -w -O2 -DNDEBUG -DPROJ_XMLPARSER -DPROJ_XMLUTIL -DPROJ_PARSERS -DPROJ_SAX4C -DPROJ_SAX2 -DPROJ_DOM -DPROJ_DEPRECATED_DOM -DPROJ_VALIDATORS -DXML_USE_NATIVE_TRANSCODER -DXML_USE_INMEM_MESSAGELOADER -DXML_USE_PTHREADS -DXML_USE_NETACCESSOR_SOCKET -DXML_BITSTOBUILD_64 "
export CFLAGS=" -w -O2 -DNDEBUG -DPROJ_XMLPARSER -DPROJ_XMLUTIL -DPROJ_PARSERS -DPROJ_SAX4C -DPROJ_SAX2 -DPROJ_DOM -DPROJ_DEPRECATED_DOM -DPROJ_VALIDATORS -DXML_USE_NATIVE_TRANSCODER -DXML_USE_INMEM_MESSAGELOADER -DXML_USE_PTHREADS -DXML_USE_NETACCESSOR_SOCKET -DXML_BITSTOBUILD_64 "
export LDFLAGS=" "
export LIBS=" -lpthread "
configure --prefix=/home/dev/isp2.2/SIPTelecom3.3/thirdParty/xerces-c-src_2_8_0

#If the result of the above commands look OK to you, go to the directory
#/home/dev/isp2.2/SIPTelecom3.3/thirdParty/xerces-c-src_2_8_0/src/xercesc and type "make" (or "gmake")
#to make the XERCES-C system.
#  `configure' configures this package to adapt to many kinds of systems.
#  
#  Usage: ./configure [OPTION]... [VAR=VALUE]...
#  
#  To assign environment variables (e.g., CC, CFLAGS...), specify them as
#  VAR=VALUE.  See below for descriptions of some of the useful variables.
#  
#  Defaults for the options are specified in brackets.
#  
#  Configuration:
#    -h, --help              display this help and exit
#        --help=short        display options specific to this package
#        --help=recursive    display the short help of all the included packages
#    -V, --version           display version information and exit
#    -q, --quiet, --silent   do not print `checking...' messages
#        --cache-file=FILE   cache test results in FILE [disabled]
#    -C, --config-cache      alias for `--cache-file=config.cache'
#    -n, --no-create         do not create output files
#        --srcdir=DIR        find the sources in DIR [configure dir or `..']
#  
#  Installation directories:
#    --prefix=PREFIX         install architecture-independent files in PREFIX
#  			  [/usr/local]
#    --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
#  			  [PREFIX]
#  
#  By default, `make install' will install all the files in
#  `/usr/local/bin', `/usr/local/lib' etc.  You can specify
#  an installation prefix other than `/usr/local' using `--prefix',
#  for instance `--prefix=$HOME'.
#  
#  For better control, use the options below.
#  
#  Fine tuning of the installation directories:
#    --bindir=DIR           user executables [EPREFIX/bin]
#    --sbindir=DIR          system admin executables [EPREFIX/sbin]
#    --libexecdir=DIR       program executables [EPREFIX/libexec]
#    --sysconfdir=DIR       read-only single-machine data [PREFIX/etc]
#    --sharedstatedir=DIR   modifiable architecture-independent data [PREFIX/com]
#    --localstatedir=DIR    modifiable single-machine data [PREFIX/var]
#    --libdir=DIR           object code libraries [EPREFIX/lib]
#    --includedir=DIR       C header files [PREFIX/include]
#    --oldincludedir=DIR    C header files for non-gcc [/usr/include]
#    --datarootdir=DIR      read-only arch.-independent data root [PREFIX/share]
#    --datadir=DIR          read-only architecture-independent data [DATAROOTDIR]
#    --infodir=DIR          info documentation [DATAROOTDIR/info]
#    --localedir=DIR        locale-dependent data [DATAROOTDIR/locale]
#    --mandir=DIR           man documentation [DATAROOTDIR/man]
#    --docdir=DIR           documentation root [DATAROOTDIR/doc/PACKAGE]
#    --htmldir=DIR          html documentation [DOCDIR]
#    --dvidir=DIR           dvi documentation [DOCDIR]
#    --pdfdir=DIR           pdf documentation [DOCDIR]
#    --psdir=DIR            ps documentation [DOCDIR]
#  
#  System types:
#    --build=BUILD     configure for building on BUILD [guessed]
#    --host=HOST       cross-compile to build programs to run on HOST [BUILD]
#  
#  Some influential environment variables:
#    CC          C compiler command
#    CFLAGS      C compiler flags
#    LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
#                nonstandard directory <lib dir>
#    LIBS        libraries to pass to the linker, e.g. -l<library>
#    CPPFLAGS    C/C++/Objective C preprocessor flags, e.g. -I<include dir> if
#                you have headers in a nonstandard directory <include dir>
#    CXX         C++ compiler command
#    CXXFLAGS    C++ compiler flags
#    CPP         C preprocessor
#  
#  Use these variables to override the choices made by `configure' or to help
#  it to find libraries and programs with nonstandard names/locations.
#  
