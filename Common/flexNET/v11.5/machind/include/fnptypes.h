/***************************************************************************************************
 * Copyright 2005 - 2006 Macrovision Europe Ltd. All Rights Reserved. 
 * 
 * This software has been provided pursuant to a License Agreement containing
 * restrictions on its use. This software contains valuable trade secrets 
 * and proprietary information of Macrovision Europe Ltd. and is protected 
 * by law. It may not be copied or distributed in any form or medium, 
 * disclosed to third parties, reverse engineered or used in any manner not 
 * provided for in said License Agreement except with the prior written 
 * authorization from Macrovision Europe Ltd. 
 **************************************************************************************************/
#ifndef FNP_TYPES_DEFINED
#define FNP_TYPES_DEFINED

#include "fnpstdtypes.h"

#define FNP_FALSE (0)
#define FNP_TRUE (1)

/* A boolean - see FNP_TRUE/FNP_FALSE. */
typedef unsigned char FNP_BOOL;

/* Errors generated by the API calls. */
enum FNP_ERROR_CODES_ENUM
{
    FNP_ERR_NONE = 0,						/* No error.*/
    FNP_ERR_UNEXPECTED,						/* An exception has been generated inside the API code that was */
											/* not expected at this time. */
    FNP_ERR_HANDLE,							/* The handle passed was not valid handle. */
    FNP_ERR_NOT_FOUND,						/* The requested item was not found. */
    FNP_ERR_NO_MORE_ITEMS,					/* The end of a list of items has been reached. */
    FNP_ERR_UNKNOWN,						/* Unknown information has been requested. */
    FNP_ERR_BUFF_TOO_SMALL,					/* The buffer supplied to the API call is too small to receive  */
											/* the data been returned. */
    FNP_ERR_INVALID_PARAM,					/* A parameter passed into the API call is not in valid state. */
    FNP_ERR_ACCESS_DENIED,					/* The call has failed because the caller does not have access to */
											/* the requested data. */
	FNP_ERR_VERIFICATION,					/* The verification of a signature failed. */
	FNP_ERR_PARTIAL_SUCCESS,				/* The call was partially successful. See API documentation for further details. */
	FNP_ERR_COMPLETE_FAILURE,				/* The call completely failed. See API documentation for further details. */
	FNP_ERR_FILE_CORRUPT,					/* The file being accessed by the API is corrupt. */
	FNP_ERR_UNTRUSTED,						/* The operation cannot complete because the require section of trusted storage is not trusted. */
    FNP_ERR_RESPONSE_FROM_SERVER_ERROR,		/* The server said 'No - I have an error'. */
    FNP_ERR_RESPONSE_FROM_SERVER_DENIED,	/* The server said 'No - I deny you a response'. */
    FNP_ERR_NOT_BROKEN,						/* The caller tried to repair a non-broken tid. */
    FNP_ERR_NOT_IN_SERVER_MODE,				/* A server specific function was called when not in server mode. */
    FNP_ERR_COMMS,
    FNP_ERR_BAD_HASH,
    FNP_ERR_UNSUPPORTED_SIGNATURE,
    FNP_ERR_PARAMETER_MISMATCH,
	FNP_ERR_NO_OUTSTANDING_REQUEST,
    FNP_ERR_REQUEST_ALREADY_OUTSTANDING,	/* A request for the specified id is already outstanding and must be actioned or deleted first. */
    FNP_ERR_XML_BADLY_FORMED,
    FNP_ERR_XML_INVALID,
    FNP_ERR_XML_MISSING_MANDATORY_ELEMENT,
    FNP_ERR_SERVICE_INTERFACE,              /* A service interface error occurred. */
    FNP_ERR_FULFILLMENT_RECORD_NOT_FOUND,   /* A specified FR could not be found. */
    FNP_ERR_BAD_TRUSTED_CONFIG,				/* The trusted configuration being imported is invalid or badly formed. */
	FNP_ERR_INVALID_TARGET_XML,
	FNP_ERR_RECVDATA_FAILED,
	FNP_ERR_SENDDATA_FAILED,
	FNP_ERR_INVALID_REQUEST_TYPE,
	FNP_ERR_CONNECTION_FAILED,
	FNP_ERR_SSLCONTEXT_FAILED,
	FNP_ERR_INVALID_CONTEXT,
	FNP_ERR_TIMEDOUT,
	FNP_ERR_CANCELLED_BY_SERVER,
    FNP_ERR_CANCELLED_BY_CALLER,
	FNP_ERR_NO_TRUSTED_CONFIG,				/* The operation cannot complete because there is no trusted config information for the requested section or possibly not trusted section at all! */
    FNP_ERR_XML_VERSION_UNSUPPORTED,        /* Some XML was encountered with an unsupported VersionNumber */
    FNP_ERR_ANCHORING_DISABLED,				/* Operation requires anchoring to be enabled in config */
    FNP_ERR_TRIAL_EXISTS,
    FNP_ERR_WRITE_FILE
};

/* Error codes - see FNP_ERROR_CODES_ENUM. */
typedef enum FNP_ERROR_CODES_ENUM FNP_ERROR_CODES;


/* Fulfillment record traits */
enum FNP_RECORD_TRAITS_ENUM
{
    FNP_TRAIT_ANCHORING			= 0,	/* Record is using anchoring techniques */
    FNP_TRAIT_BINDING			= 1 	/* Record is using binding techniques */
};

/* Traits applicable to fulfillment records in Trusted Storage - see FNP_RECORD_TRAITS_ENUM. */
typedef enum FNP_RECORD_TRAITS_ENUM FNP_RECORD_TRAITS;

/* COmms status */
enum FNP_COMMS_STATUS_CODES_ENUM {
	FNP_COMMS_STATUS_ERROR = 0,
	FNP_COMMS_STATUS_SUCCESS,
	FNP_COMMS_STATUS_NOT_SET,
	FNP_COMMS_STATUS_CANCELLED_BY_CALLER,
    FNP_COMMS_STATUS_CREATING_REQUEST,
    FNP_COMMS_STATUS_REQUEST_CREATED,
	FNP_COMMS_STATUS_CONTEXT_CREATED,
	FNP_COMMS_STATUS_CONNECTED,
	FNP_COMMS_STATUS_REQUEST_SENT,
	FNP_COMMS_STATUS_POLLING_FOR_RESPONSE,
	FNP_COMMS_STATUS_WAITING_FOR_RESPONSE,
	FNP_COMMS_STATUS_DONE
};

/* Status codes - see FNP_STATUS_CODES_ENUM. */
typedef enum FNP_COMMS_STATUS_CODES_ENUM FNP_COMMS_STATUS_CODES;

/* Comms status returns */
enum FNP_COMMS_CALLBACK_RETURN_CODES_ENUM {
	FNP_COMMS_CALLBACK_RETURN_CONTINUE = 0,
	FNP_COMMS_CALLBACK_RETURN_CANCEL_REQUEST
};

/* Status returns - see FNP_COMMS_CALLBACK_RETURN_CODES_ENUM. */
typedef enum FNP_COMMS_CALLBACK_RETURN_CODES_ENUM FNP_COMMS_CALLBACK_RETURN_CODES;

/* Handles to objects returned by the API. */
typedef uint32_t FNP_HAMCONTEXT;
typedef uint32_t FNP_HSTORAGE;
typedef uint32_t FNP_HRECORD;
typedef uint32_t FNP_HDICTIONARY;
typedef uint32_t FNP_HASRMAN;
typedef uint32_t FNP_HASR;
typedef uint32_t FNP_HASCONTEXT;

/* Trusted state bitfield values */
#define	FNP_RECORD_TRUST_RESTORE	0x1		/* The restore trust (1 = trusted, 0 = untrusted) */
#define	FNP_RECORD_TRUST_HOST		0x2		/* The host trust (1 = trusted, 0 = untrusted) */
#define FNP_RECORD_TRUST_TIME		0x4		/* The time trust (1 = trusted, 0 = untrusted) */
#define FNP_RECORD_FULLY_TRUSTED	(FNP_RECORD_TRUST_RESTORE | FNP_RECORD_TRUST_HOST | FNP_RECORD_TRUST_TIME)

typedef uint32_t(*FNP_STATUS_CALLBACK)(const void* pUserData, uint32_t statusOld, uint32_t statusNew);

/* Type of Unique Machine Identifier to return */
enum FNP_UMN_TYPE_ENUM
{
	FNP_UMN_TYPE1 = 0,
	FNP_UMN_TYPE2
};

typedef enum FNP_UMN_TYPE_ENUM FNP_UMN_TYPE;

#endif
